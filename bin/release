#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import sys
import subprocess
import httplib
import urllib2
import json
import copy

user = 'noboru-i'
repo = 'issue-hub'
token = os.getenv('GITHUB_API_TOKEN')
branch = os.getenv('CIRCLE_BRANCH')

host = 'api.github.com'

headers = {
    'Authorization' : 'token %s' % token,
    'Content-Type' : 'application/json',
    'User-Agent' : 'issue-hub release'
}

# get file name from arg
argvs = sys.argv
argc = len(argvs)
if (argc != 2):
    print 'Usage: # python %s filename' % argvs[0]
    quit()
file_name = argvs[1]

# get version from package.json
package_info = json.loads(open('package.json').read())
tag_version = package_info['version']

# get current release id or None
def get_release_id():
    print 'get_release_id'
    path = '/repos/%s/%s/releases/tags/v%s' % (user, repo, tag_version)
    conn = httplib.HTTPSConnection(host)
    conn.request('GET', path, None, headers)
    resp = conn.getresponse()
    print resp.status
    if resp.status == 404:
        return None
    res = json.loads(resp.read())
    return res['id']

# delete current release by id
def delete_release(id):
    print 'delete_release'
    path = '/repos/%s/%s/releases/%s' % (user, repo, id)
    conn = httplib.HTTPSConnection(host)
    conn.request('DELETE', path, None, headers)
    resp = conn.getresponse()
    print resp.status

    # delete tag
    subprocess.call('git config --global user.email ishikura.noboru@gmail.com'.split(' '))
    subprocess.call('git config --global user.name "CircleCI"'.split(' '))
    subprocess.call(('git tag -d v%s' % tag_version).split(' '))
    subprocess.call(('git push origin :v%s' % tag_version).split(' '))
    subprocess.call(('git tag -a v%s -m "v%s"' % (tag_version, tag_version)).split(' '))
    subprocess.call(('git push origin v%s' % tag_version).split(' '))

# create new release
def create_release():
    print 'create_release'
    path = '/repos/%s/%s/releases' % (user, repo)
    params = {
        'tag_name' : 'v%s' % tag_version,
        'target_commitish' : branch,
        'name' : 'v%s' % tag_version,
        'prerelease' : True
    }
    conn = httplib.HTTPSConnection(host)
    conn.request('POST', path, json.dumps(params), headers)
    resp = conn.getresponse()
    print resp.status
    res = json.loads(resp.read())
    return res

# upload binary file
def upload_file(upload_url, file_name):
    print 'upload_file'
    name = os.path.basename(file_name)
    url = upload_url.replace('{?name,label}', '?name=%s' % name)
    print url
    length = os.path.getsize(file_name)
    data = open(file_name, 'rb')
    req = urllib2.Request(url, data)
    req.add_header('Content-Length', '%d' % length)
    req.add_header('Content-Type', 'application/octet-stream')
    req.add_header('Authorization', 'token %s' % token)
    res = urllib2.urlopen(req).read()
    return res

id = get_release_id()
print id

if id is not None:
    delete_release(id)

create_result = create_release()
print create_result['id']
print create_result['upload_url']

upload_result = upload_file(create_result['upload_url'], file_name)
